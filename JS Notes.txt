Object.method();

this is how objects and methods are setup
console.log() lets you print or log whatevers in the parathesis to the console
semicolon denotes the end of line of code


comments
single line is 
//
section is 
/*
*/



math operators for numbers in parathesis 
    Add: +
    Subtract: -
    Multiply: *
    Divide: /
    Remainder: %



Methods
actions we can perform.
We call, or use, these methods by appending an instance with:
    a period (the dot operator)
    the name of the method
    opening and closing parentheses
E.g. 'example string'.methodName()
more examples
console.log('hello'.toUpperCase()); // Prints 'HELLO'
console.log('Hey'.startsWith('H')); // Prints true
console.log('    Remove whitespace   '.trim()); //removes white space
console.log(Math.floor(Math.random() * 50)); // Prints a random whole number between 0 and 50, math.floor rounds it down to nearesty whole number, * prints random number betwqeen 0 and the value
console.log(Math.ceil(43.8)); // returns smallest integer greater than or equal to 43.8

Properties
every data type has properties for example strings have the length property used like so,
console.log('Hello'.length); // Prints 5 to the console

Variables
label and store data in memory
They are not values but they contain values
   1. Create a variable with a descriptive name.
   2. Store or update information stored in a variable.
   3. Reference or “get” information stored in a variable.
In camel casing you group words into one, the first word is lowercase, then every word that follows will have its first letter uppercased. (e.g. camelCaseEverything). 
Use let and const, to create, or declare, variables. Prior to the ES6, programmers could only use the var keyword to declare variables.
Ex of outdated method=
var myName = 'Arya';
console.log(myName);
= is the assignment operator. It assigns the value ('Arya') to the variable (myName)
var, short for variable, is a JavaScript keyword that creates, or declares, a new variable.
'Arya' is the value assigned (=) to the variable myName. You can also say that the myName variable is initialized with a value of 'Arya'.
After the variable is declared, the string value 'Arya' is printed to the console by referencing the variable name: console.log(myName)
    Variable names cannot start with numbers.
    Variable names are case sensitive, so myName and myname would be different variables. It is bad practice to create two variables that have the same name using different cases.
    Variable names cannot be the same as keywords. For a comprehensive list of keywords check out MDN’s keyword documentation.
The let keyword signals that the variable can be reassigned a different value
Ex. 
let meal = 'Enchiladas';
console.log(meal); // Output: Enchiladas
meal = 'Burrito';
console.log(meal); // Output: Burrito
be aware of when using let (and even var) is that we can declare a variable without assigning the variable a value. In such a case, the variable will be automatically initialized with a value of undefined:
Ex.
let price;
console.log(price); // Output: undefined
price = 350;
console.log(price); // Output: 350
const variable cannot be reassigned because it is constant. If you try to reassign a const variable, you’ll get a TypeError
Constant variables must be assigned a value when declared. If you try to declare a const variable without a value, you’ll get a SyntaxError
Math with variables example
let w = 4;
w = w + 1;
console.log(w); // Output: 5
other examples
let x = 20;
x -= 5; // Can be written as x = x - 5
console.log(x); // Output: 15
let y = 50;
y *= 2; // Can be written as y = y * 2
console.log(y); // Output: 100
let z = 8;
z /= 2; // Can be written as z = z / 2
console.log(z); // Output: 4
ex 2
levelUp += 5
powerLevel -= 100
multiplyMe *= 11
quarterMe /= 4

Variable Operators
The increment operator will increase the value of the variable by 1. The decrement operator will decrease the value of the variable by 1. For example:
let a = 10;
a++;
console.log(a); // Output: 11
let b = 20;
b--;
console.log(b); // Output: 19
The + operator can be used to combine two string values even if those values are being stored in variables:
let myPet = 'armadillo';
console.log('I own a pet ' + myPet + '.'); 
// Output: 'I own a pet armadillo.'

String interpolation
In the ES6 version of JavaScript, we can insert, or interpolate, variables into strings using template literals. Check out the following example where a template literal is used to log strings together:
Ex:
const myPet = 'armadillo';
console.log(`I own a pet ${myPet}.`);
// Output: I own a pet armadillo.
These help with readability 
Ex2
let myName = "LouiV"
let myCity = "Cle"
console.log(`My name is ${myName}. My favorite city is ${myCity}`);
// Prints My name is LouiV. My favorite city is Cle to console

Check data type
The typeof operator checks the value to its right and returns, or passes back, a string of the data type.
Ex:
const unknown1 = 'foo';
console.log(typeof unknown1); // Output: string
const unknown2 = 10;
console.log(typeof unknown2); // Output: number
const unknown3 = true; 
console.log(typeof unknown3); // Output: boolean

ES6 arrow functions:
const greeting = () => console.log('Hello World'); 

If conditional programming
The if statement is composed of:
    The if keyword followed by a set of parentheses () which is followed by a code block, or block statement, indicated by a set of curly braces {}.
    Inside the parentheses (), a condition is provided that evaluates to true or false.
    If the condition evaluates to true, the code inside the curly braces {} runs, or executes.
    If the condition evaluates to false, the block won’t execute.
Ex.
if (true) {
  console.log('This message will print!'); 
}
// Prints: This message will print!
Ex.2
let sale = true
if (sale) {
  console.log("Time to buy!")
}

If Else conditional programming
An else statement must be paired with an if statement
the else statement:
    Uses the else keyword following the code block of an if statement.
    Has a code block that is wrapped by a set of curly braces {}.
    The code inside the else statement code block will execute when the if statement’s condition evaluates to false
if...else statements allow us to automate solutions to yes-or-no questions, also known as binary decisions
Ex.
if (false) {
  console.log('The code in this block will not run.');
} else {
  console.log('But the code in this block will!');
}
// Prints: But the code in this block will!

comparison operators for conditionals
Here is a list of some handy comparison operators and their syntax:
    Less than: <
    Greater than: >
    Less than or equal to: <=
    Greater than or equal to: >=
    Is equal to: ===
    Is not equal to: !==
Comparison operators compare the value on the left with the value on the right. For instance:
ex.1
10 < 12 // Evaluates to true
think of comparison statements as questions. When the answer is “yes”, the statement evaluates to true, and when the answer is “no”, the statement evaluates to false. The code above would be asking: is 10 less than 12? Yes! So 10 < 12 evaluates to true
We can also use comparison operators on different data types like strings:
Ex.
'apples' === 'oranges' // false
Ex 2
let hungerLevel = 7;
if (hungerLevel > 7) {
  console.log("Time to eat!")
} else {
  console.log("We can eat later!")
}

operators notes 
= is assignment.
== check if values are equal:
3 == "3" // true
=== also check if the data type matches:
3 === "3" // false

logical operators
Working with conditionals means that we will be using booleans, true or false values. In JavaScript, there are operators that work with boolean values known as logical operators. We can use logical operators to add more sophisticated logic to our conditionals. There are three logical operators:
    the and operator (&&)
    the or operator (||)
    the not operator, otherwise known as the bang operator (!)
When using the && operator, both conditions must evaluate to true for the entire condition to evaluate to true and execute. Otherwise, if either condition is false, the && condition will evaluate to false and the else block will execute. 
Ex.
if (stopLight === 'green' && pedestrians === 0) {
  console.log('Go!');
} else {
  console.log('Stop');
}
When using the || operator, only one of the conditions must evaluate to true for the overall statement to evaluate to true. In the code example above, if either day === 'Saturday' or day === 'Sunday' evaluates to true the if‘s condition will evaluate to true and its code block will execute. If the first condition in an || statement evaluates to true, the second condition won’t even be checked. Only if day === 'Saturday' evaluates to false will day === 'Sunday' be evaluated. The code in the else statement above will execute only if both comparisons evaluate to false.
Ex.
if (day === 'Saturday' || day === 'Sunday') {
  console.log('Enjoy the weekend!');
} else {
  console.log('Do some work.');
}
the ! operator will either take a true value and pass back false, or it will take a false value and pass back true. 
let excited = true;
console.log(!excited); // Prints false
let sleepy = false;
console.log(!sleepy); // Prints true
Ex of and operator 
let mood = 'sleepy';
let tirednessLevel = 6;
if (mood === "sleepy" && tirednessLevel > 8) {
  console.log("time to sleep")
} else {
  console.log("not bed time yet")
}

Truthy and falsey
determines if a variable has a value or a "true" value
Ex of truthy.
let myVariable = 'I Exist!';
if (myVariable) {
   console.log(myVariable)
} else {
   console.log('The variable does not exist.')
}
The list of falsy values includes:
    0
    Empty strings like "" or ''
    null which represent when there is no value at all
    undefined which represent when a declared variable lacks a value
    NaN, or Not a Number
Ex.
let numberOfApples = 0;
if (numberOfApples){
   console.log('Let us eat apples!');
} else {
   console.log('No apples left!');
}
// Prints 'No apples left!'

truthy and falsy assignments
Say you have a website and want to take a user’s username to make a personalized greeting. Sometimes, the user does not have an account, making the username variable falsy. The code below checks if username is defined and assigns a default string if it is not:
let username = '';
let defaultName;
if (username) {
  defaultName = username;
} else {
  defaultName = 'Stranger';
}
console.log(defaultName); // Prints: Stranger
If you combine your knowledge of logical operators you can use a short-hand for the code above. In a boolean condition, JavaScript assigns the truthy value to a variable if you use the || operator in your assignment:
let username = '';
let defaultName = username || 'Stranger';
console.log(defaultName); // Prints: Stranger
Because || or statements check the left-hand condition first, the variable defaultName will be assigned the actual value of username if it is truthy, and it will be assigned the value of 'Stranger' if username is falsy. This concept is also referred to as short-circuit evaluation
Ex.
let tool = '';
// Use short circuit evaluation to assign  writingUtensil variable below:
let writingUtensil = tool || "pen"
console.log(`The ${writingUtensil} is mightier than the sword.`);

ternary operator
shortens if and statements
ex of if and
let isNightTime = true;
if (isNightTime) {
  console.log('Turn on the lights!');
} else {
  console.log('Turn off the lights!');
}
We can use a ternary operator to perform the same functionality:
ex of ternary operator:
isNightTime ? console.log('Turn on the lights!') : console.log('Turn off the lights!');
In the example above:
    The condition, isNightTime, is provided before the ?.
    Two expressions follow the ? and are separated by a colon :.
    If the condition evaluates to true, the first expression executes.
    If the condition evaluates to false, the second expression executes.
Like if...else statements, ternary operators can be used for conditions which evaluate to true or false.
changing the old code to ternary is an example of refactoring 

Else if statements
are in the middle of if and statements
allow for multiple outcomes
read from top to bottom so first one thats true gets executed
Ex.
let stopLight = 'yellow';
if (stopLight === 'red') {
  console.log('Stop!');
} else if (stopLight === 'yellow') {
  console.log('Slow down.');
} else if (stopLight === 'green') {
  console.log('Go!');
} else {
  console.log('Caution, unknown!');
}
EX 2
let season = 'summer';
if (season === 'spring') {
  console.log('It\'s spring! The trees are budding!');
} else if (season === "winter") {
  console.log("It\'s winter! Everything is covered in snow.")
} else if (season === "fall") {
  console.log("It\'s fall! Leaves are falling!")
} else if (season === "summer") {
  console.log("It\'s sunny and warm because it\'s summer!")
}
else {
  console.log('Invalid season.');
}

Switch statement
A better version of else if to use for very long conditionals, easier to type and check
ex.
let groceryItem = 'papaya';
switch (groceryItem) {
  case 'tomato':
    console.log('Tomatoes are $0.49');
    break;
  case 'lime':
    console.log('Limes are $1.49');
    break;
  case 'papaya':
    console.log('Papayas are $1.29');
    break;
  default:
    console.log('Invalid item');
    break;
}
// Prints 'Papayas are $1.29'
Ex of old code
let groceryItem = 'papaya';
if (groceryItem === 'tomato') {
  console.log('Tomatoes are $0.49');
} else if (groceryItem === 'papaya'){
  console.log('Papayas are $1.29');
} else {
  console.log('Invalid item');
}
    The switch keyword initiates the statement and is followed by ( ... ), which contains the value that each case will compare. In the example, the value or expression of the switch statement is groceryItem.
    Inside the block, { ... }, there are multiple cases. The case keyword checks if the expression matches the specified value that comes after it. The value following the first case is 'tomato'. If the value of groceryItem equalled 'tomato', that case‘s console.log() would run.
    The value of groceryItem is 'papaya', so the third case runs— Papayas are $1.29 is logged to the console.
    The break keyword tells the computer to exit the block and not execute any more code or check any other cases inside the code block. Note: Without break keywords, the first matching case will run, but so will every subsequent case regardless of whether or not it matches—including the default. This behavior is different from if/else conditional statements that execute only one block of code.
    At the end of each switch statement, there is a default statement. If none of the cases are true, then the code in the default statement will run.
EX 2
let athleteFinalPosition = 'first place';
switch (athleteFinalPosition) {
  case "first place":
   console.log("You get the gold medal!");
   break;
  case "second place":
    console.log("You get the silver medal!");
    break;
  case 'third place':
    console.log('You get the bronze medal!');
    break;
  default:
    console.log('No medal awarded.');
    break;





resources 
keywords for variables
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#keywords
var (fallout tactics may use this?
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var
math tricks
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math
built in objects 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
Checks if is integer true or false, 
console.log(Number.isInteger(2017));
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number
java vs javascript
https://www.youtube.com/watch?v=Wpeym1_lmPo
How to build a web dev portfolio
https://discuss.codecademy.com/t/guide-how-to-build-a-web-dev-portfolio/394816?_gl=1*kawg1v*_ga*NzAxMzE1OTU2MC4xNjcxNjY2NzY2*_ga_3LRZM6TM9L*MTY3MzMxMTQzNC41LjAuMTY3MzMxMTQzNC42MC4wLjA.


Projects 

//Working JS weather converter using kelvin as base 
//const variable for kelvin value
const kelvin = 0;
//const variable for celsius value
const celsius = kelvin - 273;
//const variable for celsius value
let fahrenheit = celsius * (9/5) + 32;
//Floor method to remedy decimals
fahrenheit = Math.floor(fahrenheit);
//variable for newton
let newton = celsius * (33/100)
newton = Math.floor(newton)
console.log("The temperature today is " + newton + " degrees Newton.");


//Human age to dog age converter 
//variable setting my age to 26
let  myAge = 26;
//variable to set first two years of dogs life
let earlyYears = 2;
//variabe to account for early year ratio
earlyYears *= 10.5;
//this makes earlyyears last for 2 years
let laterYears = myAge - 2;
//This is ratio of lateryears of dogs life
laterYears *= 4;
//Adds variables into one
let myAgeInDogYears = earlyYears + laterYears;
//variable of my name in all lower case
let myName = "LouiV".toLowerCase();
//logs results to console
console.log("My name is " + myName + " I am " + myAge + " years old in human years which is " + myAgeInDogYears + " in dog years.");


