The this Keyword
Objects are collections of related data and functionality. We store that functionality in methods on our objects:
const goat = {
  dietType: 'herbivore',
  makeSound() {
    console.log('baaa');
  }
};
In our goat object we have a .makeSound() method. We can invoke the .makeSound() method on goat.
goat.makeSound(); // Prints baaa
Nice, we have a goat object that can print baaa to the console. Everything seems to be working fine. What if we wanted to add a new method to our goat object called .diet() that prints the goat‘s dietType?
const goat = {
  dietType: 'herbivore',
  makeSound() {
    console.log('baaa');
  },
  diet() {
    console.log(dietType);
  }
};
goat.diet(); 
// Output will be "ReferenceError: dietType is not defined"
That’s strange, why is dietType not defined even though it’s a property of goat? That’s because inside the scope of the .diet() method, we don’t automatically have access to other properties of the goat object.
Here’s where the this keyword comes to the rescue. If we change the .diet() method to use the this, the .diet() works! :
const goat = {
  dietType: 'herbivore',
  makeSound() {
    console.log('baaa');
  },
  diet() {
    console.log(this.dietType);
  }
};
goat.diet(); 
// Output: herbivore
The this keyword references the calling object which provides access to the calling object’s properties. In the example above, the calling object is goat and by using this we’re accessing the goat object itself, and then the dietType property of goat by using property dot notation. 
Ex.
const robot = {
  model: '1E78V2',
  energyLevel: 100,
  provideInfo() { 
    return `I am ${this.model} and my current energy level is ${this.energyLevel}.`
  }
};
console.log(robot.provideInfo());
//this doesnt work with arrow function methods

Privacy
Accessing and updating properties is fundamental in working with objects. However, there are cases in which we don’t want other code simply accessing and updating an object’s properties. When discussing privacy in objects, we define it as the idea that only certain properties should be mutable or able to change in value.
Certain languages have privacy built-in for objects, but JavaScript does not have this feature. Rather, JavaScript developers follow naming conventions that signal to other developers how to interact with a property. One common convention is to place an underscore _ before the name of a property to mean that the property should not be altered. Here’s an example of using _ to prepend a property.
const bankAccount = {
  _amount: 1000
}
In the example above, the _amount is not intended to be directly manipulated.
Even so, it is still possible to reassign _amount:
bankAccount._amount = 1000000;
there are also methods called getters and setters. Both methods are used to respect the intention of properties prepended, or began, with _. Getters can return the value of internal properties and setters can safely reassign property values. 
EX.
const robot = {
  _energyLevel: 100,
  recharge(){
    this._energyLevel += 30;
    console.log(`Recharged! Energy is currently at ${this._energyLevel}%.`)
  }
};
//changing property value can cause type coercion or a sloppy return value
robot._energyLevel = "high";
robot.recharge();
//"high30" gets printed to the console now instead of 130

Getters
Getters are methods that get and return the internal properties of an object. But they can do more than just retrieve the value of a property! Let’s take a look at a getter method:
const person = {
  _firstName: 'John',
  _lastName: 'Doe',
  get fullName() {
    if (this._firstName && this._lastName){
      return `${this._firstName} ${this._lastName}`;
    } else {
      return 'Missing a first name or a last name.';
    }
  }
}
// To call the getter method: 
person.fullName; // 'John Doe'
Notice that in the getter method above:
    We use the get keyword followed by a function.
    We use an if...else conditional to check if both _firstName and _lastName exist (by making sure they both return truthy values) and then return a different value depending on the result.
    We can access the calling object’s internal properties using this. In fullName, we’re accessing both this._firstName and this._lastName.
    In the last line we call fullName on person. In general, getter methods do not need to be called with a set of parentheses. Syntactically, it looks like we’re accessing a property.
Now that we’ve gone over syntax, let’s discuss some notable advantages of using getter methods:
    Getters can perform an action on the data when getting a property.
    Getters can return different values using conditionals.
    In a getter, we can access the properties of the calling object using this.
    The functionality of our code is easier for other developers to understand.
Another thing to keep in mind when using getter (and setter) methods is that properties cannot share the same name as the getter/setter function. If we do so, then calling the method will result in an infinite call stack error. One workaround is to add an underscore before the property name like we did in the example above. 
EX2.
const robot = {
  _model: '1E78V2',
  _energyLevel: 100,
  get energyLevel(){
    if(typeof this._energyLevel === "number") {
      return "My current energy level is " + this._energyLevel
    } else {
      return "System malfunction: cannot retrieve energy level"
    }
  }
};
console.log(robot.energyLevel);

Setters
Along with getter methods, we can also create setter methods which reassign values of existing properties within an object. Let’s see an example of a setter method:
const person = {
  _age: 37,
  set age(newAge){
    if (typeof newAge === 'number'){
      this._age = newAge;
    } else {
      console.log('You must assign a number to age');
    }
  }
};
Notice that in the example above:
    We can perform a check for what value is being assigned to this._age.
    When we use the setter method, only values that are numbers will reassign this._age
    There are different outputs depending on what values are used to reassign this._age.
Then to use the setter method:
person.age = 40;
console.log(person._age); // Logs: 40
person.age = '40'; // Logs: You must assign a number to age
Setter methods like age do not need to be called with a set of parentheses. Syntactically, it looks like we’re reassigning the value of a property.
Like getter methods, there are similar advantages to using setter methods that include checking input, performing actions on properties, and displaying a clear intention for how the object is supposed to be used. Nonetheless, even with a setter method, it is still possible to directly reassign properties. For example, in the example above, we can still set ._age directly:
person._age = 'forty-five'
console.log(person._age); // Prints forty-five
Ex2
const robot = {
  _model: '1E78V2',
  _energyLevel: 100,
  _numOfSensors: 15,
  get numOfSensors(){
    if(typeof this._numOfSensors === 'number'){
      return this._numOfSensors;
    } else {
      return 'Sensors are currently down.'
    }
  },
  set numOfSensors(num) {
    if (typeof num === 'number' && num >= 0){
      this._numOfSensors = num;
    } else {
      console.log('Pass in a number that is greater than or equal to 0')
    }   
  } 
};
robot.numOfSensors = 100;
console.log(robot.numOfSensors);

VERY IMPORTANT TOOL
Factory Functions
So far we’ve been creating objects individually, but there are times where we want to create many instances of an object quickly. Here’s where factory functions come in. A real world factory manufactures multiple copies of an item quickly and on a massive scale. A factory function is a function that returns an object and can be reused to make multiple object instances. Factory functions can also have parameters allowing us to customize the object that gets returned.
Let’s say we wanted to create an object to represent monsters in JavaScript. There are many different types of monsters and we could go about making each monster individually but we can also use a factory function to make our lives easier. To achieve this diabolical plan of creating multiple monsters objects, we can use a factory function that has parameters:
const monsterFactory = (name, age, energySource, catchPhrase) => {
  return { 
    name: name,
    age: age, 
    energySource: energySource,
    scare() {
      console.log(catchPhrase);
    } 
  }
};
In the monsterFactory function above, it has four parameters and returns an object that has the properties: name, age, energySource, and scare(). To make an object that represents a specific monster like a ghost, we can call monsterFactory with the necessary arguments and assign the return value to a variable:
const ghost = monsterFactory('Ghouly', 251, 'ectoplasm', 'BOO!');
ghost.scare(); // 'BOO!'
Now we have a ghost object as a result of calling monsterFactory() with the needed arguments. With monsterFactory in place, we don’t have to create an object literal every time we need a new monster. Instead, we can invoke the monsterFactory function with the necessary arguments to take over the world make a monster for us!
IN DEPTH EXAMPLE
//Instead of making individual robots like we’ve been doing, let’s make a factory function to make robots as we please! Create a factory function named robotFactory that has two parameters model and mobile. Make the function return an object. In the object, add a key of model with the value of the model parameter. Add another property that has a key of mobile with a value of the mobile parameter.Then add a method named beep without a parameter that will log 'Beep Boop' to the console.
const robotFactory = (model, mobile) => {
  return {
    model: model,
    mobile: mobile,
    beep() {
      console.log("Beep Boop")
    }
  }
}
//Use your factory function by declaring a const variable named tinCan. Assign to tinCan the value of calling robotFactory with the first argument of 'P-500' and the second argument of true.
const tinCan = robotFactory("P-500", true);
//Let’s now check what tinCan can do! Call .beep() on tinCan.You should see 'Beep Boop' printed to the console which means the factory function produced a robot object! Play around with tinCan to check the other properties!
tinCan.beep();














resources
type of
https://discuss.codecademy.com/t/understanding-the-use-of-typeof/435656?_gl=1*1jc8fer*_ga*NzAxMzE1OTU2MC4xNjcxNjY2NzY2*_ga_3LRZM6TM9L*MTY3NDUwMDM2Ny40MC4xLjE2NzQ1MDA3NjcuNjAuMC4w
getters
https://discuss.codecademy.com/t/why-use-a-getter-and-not-a-method/435491/2?_gl=1*1jc8fer*_ga*NzAxMzE1OTU2MC4xNjcxNjY2NzY2*_ga_3LRZM6TM9L*MTY3NDUwMDM2Ny40MC4xLjE2NzQ1MDA3NjcuNjAuMC4w
FACTORY FUNCTIONS
https://discuss.codecademy.com/t/how-would-you-know-when-to-use-factory-functions/369255?_gl=1*1h4k3nj*_ga*NzAxMzE1OTU2MC4xNjcxNjY2NzY2*_ga_3LRZM6TM9L*MTY3NDUwODUyMC40MS4xLjE2NzQ1MDg1MjQuNTYuMC4w
