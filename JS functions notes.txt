const width = 10;
const height = 6;
const area =  width * height;
console.log(area); // Output: 60
//The above is code to find the area of a rectangle 
Functions will allow you to plug this code in for any rectangle size to find your area

Functions are assigned declarations or names
A function declaration consists of:
    The function keyword.
    The name of the function, or its identifier, followed by parentheses.
    A function body, or the block of statements required to perform a specific task, enclosed in the function’s curly brackets, { }.
A function declaration is a function that is bound to an identifier, or name.
Ex.
function getReminder() {
  console.log("Water the plants.");
}
// getReminder is the name we set for the function, the function is whats in curly brackets the word function initiates this as a function
This is how a function is identified and set
to run the function or call it you must type the function name you set beside paranthesis 
Ex.
getReminder()
//This will call the previous function

Parameters and Arguments
These allow functions to call values that are set via variables, this allows functions to gather data more efficiently and operate more flexibly 
Parameters are the inputs or variables and arguments are the values that get called with the function
Ex of parameter:
const width = 10
let height = 6
// in this the parameter is width and height the argument is 10 and 6
parameters are entered into the parenthesis in of the function
Ex.
function sayThanks(name) {
  console.log("Thank you for your purchase "  + name + "! We appreciate your business.");
}
sayThanks("Cole");
//bottom example is argument being called with function, each argument follows the order that parameters are called

Default parameters can be set by setting a value equal to the parameter in functions
This allows something to get called in case a value isnt set in the arguments 
Ex.
function makeShoppingList(item1 = "milk", item2 = "bread", item3 = "eggs"){
  console.log(`Remember to buy ${item1}`);
  console.log(`Remember to buy ${item2}`);
  console.log(`Remember to buy ${item3}`);
}
makeShoppingList();

Return
When doing a calculation the result comes up as undefined unless a return statement is used 
This stos any code in the function from running after this point and calls the value of any calculation
if multiple retuens are in a function the first one that runs will be the only one tht runs
Ex.
function rectangleArea(width, height) {
  if (width < 0 || height < 0) {
    return 'You need positive integers to calculate area!';
  }
  return width * height;
}
Ex 2.
function monitorCount(rows , columns) {
  return rows * columns;
}
const numOfMonitors = monitorCount(5,4);
console.log(numOfMonitors)

Helper function
a function that returns another function
easy to read and debug
Ex.
function monitorCount(rows, columns) {
  return rows * columns;
}
//helper function 
function costOfMonitors(rows, columns) {
  return monitorCount(rows, columns) * 200;
}
//variable of total cost
const totalCost = costOfMonitors(5, 4);
console.log(totalCost);
Ex. 2
function multiplyByNineFifths(number) {
  return number * (9/5);
};
function getFahrenheit(celsius) {
  return multiplyByNineFifths(celsius) + 32;
};
getFahrenheit(15); // Returns 59

Function expression
To define a function inside an expression, we can use the function keyword. In a function expression, the function name is usually omitted. A function with no name is called an anonymous function. A function expression is often stored in a variable in order to refer to it.
To declare a function expression:
    Declare a variable to make the variable’s name be the name, or identifier, of your function. Since the release of ES6, it is common practice to use const as the keyword to declare the variable.
    Assign as that variable’s value an anonymous function created by using the function keyword followed by a set of parentheses with possible parameters. Then a set of curly braces that contain the function body.
To invoke a function expression, write the name of the variable in which the function is stored followed by parentheses enclosing any arguments being passed into the function.
Ex.
variableName(argument1, argument2)

Arrow functions
ES6 introduced arrow function syntax, a shorter way to write functions by using the special “fat arrow” () => notation.
Arrow functions remove the need to type out the keyword function every time you need to create a function. Instead, you first include the parameters inside the ( ) and then add an arrow => that points to the function body surrounded in { } like this
Ex.
const rectangleArea = (width, height) => {
  let area = width * height;
  return area;
};

Concise body arrow functions refactoring
JavaScript also provides several ways to refactor arrow function syntax. The most condensed form of the function is known as concise body. We’ll explore a few of these techniques below:
    Functions that take only a single parameter do not need that parameter to be enclosed in parentheses. However, if a function takes zero or multiple parameters, parentheses are required.
    showcasing how arrow functions parameters differ for different amounts of parameters
    A function body composed of a single-line block does not need curly braces. Without the curly braces, whatever that line evaluates will be automatically returned. The contents of the block should immediately follow the arrow => and the return keyword can be removed. This is referred to as implicit return.
comparing single line and multiline arrow functions
So if we have a function:
const squareNum = (num) => {
  return num * num;
};
We can refactor the function to:
const squareNum = num => num * num;
Notice the following changes:
    The parentheses around num have been removed, since it has a single parameter.
    The curly braces { } have been removed since the function consists of a single-line block.
    The return keyword has been removed since the function consists of a single-line block.

Scope
scope is defined in blocks, blocks are usually the curly brackets in code {}
Global scope is when variables are declared outside of blocks 
Because global variables are not bound inside a block, they can be accessed by any code in the program, including code in blocks.
example of global scope:
const color = 'blue';
const returnSkyColor = () => {
  return color; // blue 
};
console.log(returnSkyColor()); // blue
    Even though the color variable is defined outside of the block, it can be accessed in the function block, giving it global scope.
    In turn, color can be accessed within the returnSkyColor function block.

Local scope 
is the same as block scope, any variable only accessible to code  within block fit this
Block scope works like this:
Ex.
const logSkyColor = () => {
  let color = 'blue'; 
  console.log(color); // Prints "blue"
};
logSkyColor(); // Prints "blue"
console.log(color); // throws a ReferenceError
You’ll notice:
    We define a function logSkyColor().
    Within the function, the color variable is only available within the curly braces of the function.
    If we try to log the same variable outside the function, it throws a ReferenceError.

Scope pollution 
dont define variables in global, define them in functions
is when we have too many global variables that exist in the global namespace, or when we reuse variables across different scopes. Scope pollution makes it difficult to keep track of our different variables and sets us up for potential accidents. For example, globally scoped variables can collide with other variables that are more locally scoped, causing unexpected behavior in our code.
Let’s look at an example of scope pollution in practice so we know how to avoid it:
let num = 50;
const logNum = () => {
  num = 100; // Take note of this line of code
  console.log(num);
};
logNum(); // Prints 100
console.log(num); // Prints 100
You’ll notice:
    We have a variable num.
    Inside the function body of logNum(), we want to declare a new variable but forgot to use the let keyword.
    When we call logNum(), num gets reassigned to 100.
    The reassignment inside logNum() affects the global variable num.
    Even though the reassignment is allowed and we won’t get an error, if we decided to use num later, we’ll unknowingly use the new value of num.
While it’s important to know what global scope is, it’s best practice to not define variables in the global scope. 

Practice Good Scoping
Given the challenges with global variables and scope pollution, we should follow best practices for scoping our variables as tightly as possible using block scope.
Tightly scoping your variables will greatly improve your code in several ways:
    It will make your code more legible since the blocks will organize your code into discrete sections.
    It makes your code more understandable since it clarifies which variables are associated with different parts of the program rather than having to keep track of them line after line!
    It’s easier to maintain your code, since your code will be modular.
    It will save memory in your code because it will cease to exist after the block finishes running.
Here’s another example of how to use block scope, as defined within an if block:
const logSkyColor = () => {
  const dusk = true;
  let color = 'blue'; 
  if (dusk) {
    let color = 'pink';
    console.log(color); // Prints "pink"
  }
  console.log(color); // Prints "blue"
};
console.log(color); // throws a ReferenceError
Here, you’ll notice:
    We create a variable dusk inside the logSkyColor() function.
    After the if statement, we define a new code block with the {} braces. Here we assign a new value to the variable color if the if statement is truthy.
    Within the if block, the color variable holds the value 'pink', though outside the if block, in the function body, the color variable holds the value 'blue'.
    While we use block scope, we still pollute our namespace by reusing the same variable name twice. A better practice would be to rename the variable inside the block.
Block scope is a powerful tool in JavaScript, since it allows us to define variables with precision, and not pollute the global namespace. If a variable does not need to exist outside a block— it shouldn’t!










Projects 
//Text based game generator
const city = "New York City";
function logCitySkyline() {
  let skyscraper = "Empire State Building";
  return 'The stars over the ' + skyscraper + ' in ' + city;
}
console.log(logCitySkyline());

//part two
const satellite = "The Moon";
const galaxy = "The Milky Way";
const stars = "North Star";
function callMyNightSky() {
  return 'Night Sky: ' + satellite + ', ' +   stars + ', and ' + galaxy;
}
console.log(callMyNightSky());

//good code example
const logVisibleLightWaves = () => {
  let lightWaves = 'Moonlight';
	let region = 'The Arctic';
  if (region === "The Arctic") {
    let lightWaves = "Northern Lights";
    console.log(lightWaves);
  }
  console.log(lightWaves);
};
logVisibleLightWaves();