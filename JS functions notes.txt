const width = 10;
const height = 6;
const area =  width * height;
console.log(area); // Output: 60
//The above is code to find the area of a rectangle 
Functions will allow you to plug this code in for any rectangle size to find your area

Functions are assigned declarations or names
A function declaration consists of:
    The function keyword.
    The name of the function, or its identifier, followed by parentheses.
    A function body, or the block of statements required to perform a specific task, enclosed in the function’s curly brackets, { }.
A function declaration is a function that is bound to an identifier, or name.
Ex.
function getReminder() {
  console.log("Water the plants.");
}
// getReminder is the name we set for the function, the function is whats in curly brackets the word function initiates this as a function
This is how a function is identified and set
to run the function or call it you must type the function name you set beside paranthesis 
Ex.
getReminder()
//This will call the previous function

Parameters and Arguments
These allow functions to call values that are set via variables, this allows functions to gather data more efficiently and operate more flexibly 
Parameters are the inputs or variables and arguments are the values that get called with the function
Ex of parameter:
const width = 10
let height = 6
// in this the parameter is width and height the argument is 10 and 6
parameters are entered into the parenthesis in of the function
Ex.
function sayThanks(name) {
  console.log("Thank you for your purchase "  + name + "! We appreciate your business.");
}
sayThanks("Cole");
//bottom example is argument being called with function, each argument follows the order that parameters are called

Default parameters can be set by setting a value equal to the parameter in functions
This allows something to get called in case a value isnt set in the arguments 
Ex.
function makeShoppingList(item1 = "milk", item2 = "bread", item3 = "eggs"){
  console.log(`Remember to buy ${item1}`);
  console.log(`Remember to buy ${item2}`);
  console.log(`Remember to buy ${item3}`);
}
makeShoppingList();

Return
When doing a calculation the result comes up as undefined unless a return statement is used 
This stos any code in the function from running after this point and calls the value of any calculation
if multiple retuens are in a function the first one that runs will be the only one tht runs
Ex.
function rectangleArea(width, height) {
  if (width < 0 || height < 0) {
    return 'You need positive integers to calculate area!';
  }
  return width * height;
}
Ex 2.
function monitorCount(rows , columns) {
  return rows * columns;
}
const numOfMonitors = monitorCount(5,4);
console.log(numOfMonitors)

Helper function
a function that returns another function
easy to read and debug
Ex.
function monitorCount(rows, columns) {
  return rows * columns;
}
//helper function 
function costOfMonitors(rows, columns) {
  return monitorCount(rows, columns) * 200;
}
//variable of total cost
const totalCost = costOfMonitors(5, 4);
console.log(totalCost);
Ex. 2
function multiplyByNineFifths(number) {
  return number * (9/5);
};
function getFahrenheit(celsius) {
  return multiplyByNineFifths(celsius) + 32;
};
getFahrenheit(15); // Returns 59

Function expression
To define a function inside an expression, we can use the function keyword. In a function expression, the function name is usually omitted. A function with no name is called an anonymous function. A function expression is often stored in a variable in order to refer to it.
To declare a function expression:
    Declare a variable to make the variable’s name be the name, or identifier, of your function. Since the release of ES6, it is common practice to use const as the keyword to declare the variable.
    Assign as that variable’s value an anonymous function created by using the function keyword followed by a set of parentheses with possible parameters. Then a set of curly braces that contain the function body.
To invoke a function expression, write the name of the variable in which the function is stored followed by parentheses enclosing any arguments being passed into the function.
Ex.
variableName(argument1, argument2)

Arrow functions
ES6 introduced arrow function syntax, a shorter way to write functions by using the special “fat arrow” () => notation.
Arrow functions remove the need to type out the keyword function every time you need to create a function. Instead, you first include the parameters inside the ( ) and then add an arrow => that points to the function body surrounded in { } like this
Ex.
const rectangleArea = (width, height) => {
  let area = width * height;
  return area;
};






