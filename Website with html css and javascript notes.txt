the script tag gets embedded in html this is how javascript gets used in a website or activated in an html document
EX. (makes a flower border on click)
<!DOCTYPE html>
<html>
<head>
	<link rel="stylesheet" href="style.css">
</head>
<body>
	<section class = "container">
  	<img src = "normal.png" id= "myImage">
  	<p onclick="blooming()">Codecademy</p>
	</section>
  <!-- Paste your code in the script element below:  -->
  <script>
		function blooming() {
  var image = document.getElementById('myImage');
  if (image.src.match("normal")) {
    image.src = "flower.png";
  } else {
    image.src = "normal.png";
  }    
}    
  </script>
</body>  
</html>

Because of separation of concerns or SoC, we always make javascript in a separate file.
for this we will use a src attribute to link to our javascript file
Ex.
<script src="./exampleScript.js"></script>
this links to a js file in our projects folder using a relative path method of linking, if its hosted externally or through a cdn then use that location instead

Browsers have built in parsers for code
Js scripts are parsed in order from top down so the the script at the top of the page gets ran before the 
one at the bottom and if the top script needs a variable that the bottom one has then the top script 
will not run properly

Defer attribute
When the HTML parser comes across a <script> element, it stops to load its content. Once loaded, the JavaScript code is executed and the HTML parser proceeds to parse the next element in the file. This can result in a slow load time for your website. HTML4 introduced the defer and async attributes of the <script> element to address the user wait-time in the website based on different scenarios.
The defer attribute specifies scripts should be executed after the HTML file is completely parsed. When the HTML parser encounters a <script> element with the defer attribute, it loads the script but defers the actual execution of the JavaScript until after it finishes parsing the rest of the elements in the HTML file.
Here is an example of the defer tag:
<script src="example.js" defer></script>
When is defer useful?
When a script contains functionality that requires interaction with the DOM, the defer attribute is the way to go. This way, it ensures that the entire HTML file has been parsed before the script is executed.

Async attribute
The async attribute loads and executes the script asynchronously with the rest of the webpage. This means that, similar to the defer attribute, the HTML parser will continue parsing the rest of the HTML as the script is downloaded in the background. However, with the async attribute, the script will not wait until the entire page is parsed: it will execute immediately after it has been downloaded. Here is an example of the async tag:
<script src="example.js" async></script>
When is it useful?
async is useful for scripts that are independent of other scripts in order to function accordingly. Thus, if it does not matter exactly at which point the script file is executed, asynchronous loading is the most suitable option as it optimizes web page load time.

What is the DOM?
The Document Object Model, abbreviated DOM, is a powerful tree-like structure that allows programmers to conceptualize hierarchy and access the elements on a web page.
The DOM is one of the better-named acronyms in the field of Web Development. In fact, a useful way to understand what DOM does is by breaking down the acronym but out of order:
    The DOM is a logical tree-like Model that organizes a web page’s HTML Document as an Object.
The DOM is implemented by browsers to allow JavaScript to access, modify, and update the structure of an HTML web page in an organized way.
For this reason, we like to think of the DOM as the link between an HTML web page and scripting languages.
Html is a list of elements from top to bottom, dom structures this into a tre, now javascript canaccess this
The DOM tree follows similar logic to that of a family tree. A family tree is made up of family members and their relationships to the family name. In computer science, we would call each family member a node.
We define a node as an intersecting point in a tree that contains data.
In the DOM tree, the top-most node is called the root node, and it represents the HTML document. The descendants of the root node are the HTML tags in the document, starting with the <html> tag followed by the <head> and <body> tags and so on.

The Document Keyword
The Document Object Model, abbreviated DOM, is a powerful tree-like structure that organizes the elements on a web page and allows scripting languages to access them. This lesson will focus on some of the most useful methods and properties of the DOM interface in JavaScript. This interface is implemented by every modern browser.
First things first! The document object in JavaScript is the door to the DOM structure. The document object allows you to access the root node of the DOM tree. Before you can access a specific element in the page, first you must access the document structure itself. The document object allows scripts to access children of the DOM as properties.
For example, if you want to access the <body> element from your script, you can access it as a property of the document object by using document.body. This property will return the body element of that DOM.
Similarly, you could access the <title> element with the .title property.

VERY IMPORTANT USE THIS FOR APP
Tweak an Element
When using the DOM in your script to access an HTML element, whether it’s an <li> element or the entire <body> element, you also have access to all of that element’s properties.
This includes the ability to modify the contents of the element as well as its attributes and properties, which can range from modifying the text inside a <p> element to assigning a new background color to a <div>. For example, the .innerHTML property allows you to access and set the contents of an element.
Let’s take a look at how we can reassign the contents of the <body> element to the text 'The cat loves the dog':
document.body.innerHTML = 'The cat loves the dog.';
The .innerHTML property can also add any valid HTML elements. The following example replaces the contents of the <body> element by assigning an <h2> element as a child inside the <body> element:
document.body.innerHTML = '<h2>This is a heading</h2>';
Ex., I think it needs to be in qoutes to operate also this will completely replace body of html
document.body.innerHTML = '<h1>This is now the heading of the body element</h1>'

THIS EXPLAINS THE QUERY SELECTOR IN APP
Select and Modify Elements
In the previous exercise, we accessed the <body> element with the document keyword!
What if we wanted to select a specific element besides the entire <body> element? The DOM interface allows us to access a specific element with CSS selectors.
CSS selectors define the elements to which a set of CSS rules apply, but we can also use these same selectors to access DOM elements with JavaScript! Selectors can include a tag name, a class, or an ID.
The .querySelector() method allows us to specify a CSS selector as a string and returns the first element that matches that selector. The following code would return the first paragraph in the document.
document.querySelector('p');
Along with .querySelector(), JavaScript has more targeted methods that select elements based on their class, id, or tag name.
For example, if you want to access an element directly by its id, you can use the aptly named .getElementById() method:
document.getElementById('bio').innerHTML = 'The description';
In this example, we’ve selected the element with an ID of 'bio' and set its .innerHTML to the text 'The description'. Notice that the ID is passed as a string, wrapped in quotation marks (' ').
There are also the .getElementsByClassName() and .getElementsByTagName() methods which return an array of elements, instead of just one element. You can use bracket notation to access individual elements of an array:
// Set first element of .student class as 'Not yet registered'
document.getElementsByClassName('student')[0].innerHTML = 'Not yet registered';
// Set second <li> tag as 'Cedric Diggory'
document.getElementsByTagName('li')[1].innerHTML = 'Cedric Diggory`;
In the above example code, the first element with the 'student' class and the second <li> element have had their inner HTML changed.
Ex.
document.querySelector("h1").innerHTML = 'Most popular Harry Potter characters';
document.getElementById("fourth").innerHTML = 'Professor Snape';
document.getElementsByClassName("slytherin")[0].innerHTML = 'Salazar Slytherin';
document.getElementsByTagName("li")[0].innerHTML = "Dobby";

Learn event listeners such as on click, then activate functions like rotate right or left, also listen to mouse movement such as enter or exit divs
use this for website building maybe!
maybe event listener paired with these skills for adding menus

Style an Element
Another way to modify an element is by changing its CSS style. The .style property of a DOM element provides access to the inline style of that HTML tag.
The syntax follows an element.style.property format, with the property representing a CSS property. For example, the following code selects the first element with a class of blue and assigns blue as the background-color:
let blueElement = document.querySelector('.blue');
blueElement.style.backgroundColor = 'blue';
Unlike CSS, the DOM .style property does not implement a hyphen such as background-color, but rather camel case notation, backgroundColor. Check out this MDN reference page to see a list of how CSS properties are converted into JavaScript.
The following chaining syntax would also work:
document.querySelector('.blue').style.fontFamily = 'Roboto';
Ex.
document.body.style.backgroundColor = '#201F2E';
document.querySelector('.heading').style.fontFamily = 'Roboto'

Traversing the DOM
Let’s recap the parent and children relationship in the DOM hierarchy. A parent node is any node that is a direct ancestor of another node. A child node is a direct descendant of another node, called the parent node.
These relationships follow the nested structure of the HTML code. Elements nested within one HTML element are children of that parent element.
Each element has a .parentNode and .children property. The .parentNode property returns the parent of the specified element in the DOM hierarchy. Note that the document element is the root node so its .parentNode property will return null. The .children property returns an array of the specified element’s children. If the element does not have any children, it will return null.
<ul id='groceries'>
  <li id='must-have'>Toilet Paper</li>
  <li>Apples</li>
  <li>Chocolate</li>
  <li>Dumplings</li>
</ul>
In the HTML code above, we have an <ul> element with the ID of groceries with four <li> elements inside.
let parentElement = document.getElementById('must-have').parentNode; // returns <ul> element
let childElements = document.getElementById('groceries').children; // returns an array of <li> elements
Here, the parentElement variable stores the .parentNode of the <li> element with the ID of must-have, which will be the <ul> element with the ID of groceries. The childElements variable is set to the children of the <ul> element with the ID of groceries, which will be an array of four <li> elements.
Ex.
//First, create a variable called first and set it to the first child of the document body.Then, set the inner HTML of the first element to 'BROWN BEARS ARE AWESOME!'. Take a moment to note which element has been modified.
const first = document.body.children[0];
first.innerHTML = 'BROWN BEARS ARE AWESOME!';
//Use the .parentNode property to access the parent element of the variable first and modify its .style.backgroundColor to 'beige'.
first.parentNode.style.backgroundColor = 'beige';

IMPORTANT THIS IS HOW YOU ADD ELEMENTS 
Create and Insert Elements
Just as the DOM allows scripts to modify existing elements, it also allows for the creation of new ones.
The .createElement() method creates a new element based on the specified tag name passed into it as an argument. However, it does not append it to the document. It creates an empty element with no inner HTML.
let paragraph = document.createElement('p');
In the example code above, the .createElement() method takes 'p' as its argument which creates an empty <p> element and stores it as the paragraph variable.
We can assign values to the properties of the newly created element like how we’ve done previously with existing elements.
paragraph.id = 'info';
paragraph.innerHTML = 'The text inside the paragraph';
Above, we use the .id property to assign 'info' as ID and the .innerHTML property to set 'The text inside the paragraph' as the content of the <p> element.
In order to create an element and add it to the web page, you must assign it to be the child of an element that already exists on the DOM, referred to as the parent element. We call this process appending. The .appendChild() method will add a child element as the parent element’s last child node. The following code appends the <p> element stored in the paragraph variable to the document body.
document.body.appendChild(paragraph);
The .appendChild() method does not replace the content inside of the parent, in this case, body. Rather, it appends the new element as the last child of that parent.
Ex.
//Create a <li> element using the .createElement() method and save it in a variable called newAttraction.
let newAttraction = document.createElement('li');
//On the following line, assign the newAttraction element an id of 'vespa'. 
newAttraction.id = 'vespa';
//Next, assign the newAttraction element the text 'Rent a Vespa' as its inner HTML. 
newAttraction.innerHTML = 'Rent a Vespa';
//Lastly, append the newAttraction element to the list of top attractions with the ID of italy-attractions. 
document.getElementById('italy-attractions').appendChild(newAttraction);

Remove an Element
In addition to modifying or creating an element from scratch, the DOM also allows for the removal of an element. The .removeChild() method removes a specified child from a parent.
let paragraph = document.querySelector('p');
document.body.removeChild(paragraph);
In the above example code, the .querySelector() method returns the first paragraph in the document. Then, the paragraph element is passed as an argument of the .removeChild() method chained to the parent of the paragraph—document.body. This removes the first paragraph from the document body.
If you want to hide an element rather than completely deleting it, the .hidden property allows you to hide it by setting the property as true or false:
document.getElementById('sign').hidden = true;
The code above did not remove the element with ID of 'sign' from the DOM but rather, hid it.
Ex.
let elementToRemove = document.getElementById('vespa');
document.getElementById('italy-attractions').removeChild(elementToRemove);

POSSIBLY LAST PIECE OF PUZZLE
Add Click Interactivity
You can add interactivity to DOM elements by assigning a function to run based on an event. Events can include anything from a click to a user mousing over an element. We will learn more about events in the upcoming DOM Events with JavaScript lesson. For now, let’s take a look at how to modify an element when a click event happens.
The .onclick property allows you to assign a function to run on when a click event happens on an element:
let element = document.querySelector('button');
element.onclick = function() { 
  element.style.backgroundColor = 'blue'
};
You can also assign the .onclick property to a function by name:
let element = document.querySelector('button');
function turnBlue() {
   element.style.backgroundColor = 'blue';
}
element.onclick = turnBlue;
In the above example code, when the <button> element detects a click event, the backgroundColor will change to 'blue'.
Ex.
let element = document.querySelector('button');
function turnButtonRed(){
  element.style.backgroundColor = 'red';
  element.style.color = 'white';
  element.innerHTML = 'Red Button';
}
element.onclick = turnButtonRed;













project change font on click
html,
<!DOCTYPE html>
<html> 
  <head>
    <link rel="stylesheet" href="style.css">
    <!-- Add your script tag here -->
		<script src="./script.js"></script>
  </head>
  <body onclick="newStyle();">
    <p class="centered" id="logo">Codecademy</p>
	</body>
</html>
javascript
function newStyle() {
  let newColor = '';
  let newFont = ''; 
  let x = Math.floor(Math.random()*7); 
  switch (x){
    case 0:
      newColor = 'red';
      newFont = 'Times New Roman'; 
      break;
    case 1: 
      newColor = 'blue';
      newFont = 'Florence, cursive'; 
      break;
    case 2:
      newColor = 'yellow';
      newFont = 'Verdana';
      break; 
    case 3:
      newColor= 'purple';
      newFont = 'Courier New';
      break
    case 4:
      newColor = 'cyan';
      newFont = 'Georgia'; 
      break;
    case 5:
        newColor = 'maroon';
        newFont = 'Palatino';
        break;
    case 6: 
        newColor = 'lime';
        newFont = 'Impact';
        break;
  }
  var elem = document.getElementById('logo');
  elem.style.color = newColor;
  elem.style.fontFamily = newFont; 
}
css
body {
  background-color: white;
  font-family: 'Raleway', sans-serif;
}
img {
  display: block;
  margin-left: auto;
  margin-right: auto;
  length: 300px;
  width:700px;
}
.container {
  position: relative;
  text-align: center;
  color: white;
}
.centered {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 3em;
  color: #459287;
}
button {
  height:40px;
  width: 160px;
  font-size: 18px;
  color: white;
  background-color:#2c5e62;
  border-radius: 8px;
}
p {
	text-align: center;
}






resources
cdns 
https://developer.mozilla.org/en-US/docs/Glossary/CDN
use script at end of page to be cross compatable
https://discuss.codecademy.com/t/when-should-i-use-the-defer-attribute-on-a-script-element-in-the-head-vs-using-a-script-element-at-the-end-of-the-body/420121?_gl=1*rnckwc*_ga*NzAxMzE1OTU2MC4xNjcxNjY2NzY2*_ga_3LRZM6TM9L*MTY3NTExMjQyMi41MC4xLjE2NzUxMTI0MjguNTQuMC4w
document
https://developer.mozilla.org/en-US/docs/Web/API/Document
events
https://developer.mozilla.org/en-US/docs/Web/Events
references
https://developer.mozilla.org/en-US/docs/Web/CSS/Reference#index
documents
https://developer.mozilla.org/en-US/docs/Web/API/Document
mpre practice with events
https://www.codecademy.com/courses/build-interactive-websites/lessons/dom-events/exercises/intro-javascript-events


