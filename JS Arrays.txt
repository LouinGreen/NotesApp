arrays are javascripts way of making list and are ordered like any list, they can store any data type
    The array is represented by the square brackets [] and the content inside.
    Each content item inside an array is called an element.
    There are three different elements inside the array.
    Each element inside the array is a different data type.
We can also save an array to a variable.
Ex.
let newYearsResolutions = ['Keep a journal', 'Take a falconry class', 'Learn to juggle'];

Arrays are 0 indexed so each value is assigned a number starting from zero that increases from left to right
Ex.
cities[0]
In the code snippet above:
    cities is an array that has three elements.
    We’re using bracket notation, [] with the index after the name of the array to access the element.
    cities[0] will access the element at index 0 in the array cities. You can think of cities[0] as accessing the space in memory that holds the string 'New York'.
You can also access individual characters in a string using bracket notation and the index. For instance, you can write:
const hello = 'Hello World';
console.log(hello[6]);
// Output: W
The console will display W since it is the character that is at index 6
Ex.
const famousSayings = ['Fortune favors the brave.', 'A joke is a very serious thing.', 'Where there is love there is life.'];
let listItem = famousSayings[0];
console.log(listItem);
console.log(famousSayings[3]);
//if you log something that isnt value like at the bottom it appears as undefined or falsey

Update Elements
Once you have access to an element in an array, you can update its value.
Ex.
let seasons = ['Winter', 'Spring', 'Summer', 'Fall'];
seasons[3] = 'Autumn';
console.log(seasons); 
//Output: ['Winter', 'Spring', 'Summer', 'Autumn']

length property
One of an array’s built-in properties is length and it returns the number of items in the array. We access the .length property just like we do with strings. Check the example below:
const newYearsResolutions = ['Keep a journal', 'Take a falconry class'];
console.log(newYearsResolutions.length);
// Output: 2
In the example above, we log newYearsResolutions.length to the console using the following steps:
    We use dot notation, chaining a period with the property name to the array, to access the length property of the newYearsResolutions array.
    Then we log the length of newYearsResolution to the console.
    Since newYearsResolution has two elements, 2 would be logged to the console.
When we want to know how many elements are in an array, we can access the .length property.

The .push() Method
Let’s learn about some built-in JavaScript methods that make working with arrays easier. These methods are specifically called on arrays to make common tasks, like adding and removing elements, more straightforward.
One method, .push(), allows us to add items to the end of an array. Here is an example of how this is used:
const itemTracker = ['item 0', 'item 1', 'item 2'];
itemTracker.push('item 3', 'item 4');
console.log(itemTracker); 
// Output: ['item 0', 'item 1', 'item 2', 'item 3', 'item 4'];
So, how does .push() work?
    We access the push method by using dot notation, connecting push to itemTracker with a period.
    Then we call it like a function. That’s because .push() is a function and one that JavaScript allows us to use right on an array.
    .push() can take a single argument or multiple arguments separated by commas. In this case, we’re adding two elements: 'item 3' and 'item 4' to itemTracker.
    Notice that .push() changes, or mutates, itemTracker. You might also see .push() referred to as a destructive array method since it changes the initial array.
Ex.
const chores = ['wash dishes', 'do laundry', 'take out trash'];
chores.push("yo", "yoyo");
console.log(chores);

The .pop() Method
Another array method, .pop(), removes the last item of an array.
const newItemTracker = ['item 0', 'item 1', 'item 2'];
const removed = newItemTracker.pop();
console.log(newItemTracker); 
// Output: [ 'item 0', 'item 1' ]
console.log(removed);
// Output: item 2
    In the example above, calling .pop() on the newItemTracker array removed item 2 from the end.
    .pop() does not take any arguments, it simply removes the last element of newItemTracker.
    .pop() returns the value of the last element. In the example, we store the returned value in a variable removed to be used for later.
    .pop() is a method that mutates the initial array.
Ex.2
const chores = ['wash dishes', 'do laundry', 'take out trash', 'cook dinner', 'mop floor'];
chores.pop();
console.log(chores);

The last two array methods mutate arrays, not all methods do this
Some other arrays methods that are available to JavaScript developers include: .join(), .slice(), .splice(), .shift(), .unshift(), and .concat() amongst many others. Using these built-in methods make it easier to do some common tasks when working with arrays. 
there are many other that can be found on mdn or other sites
Ex.
const groceryList = ['orange juice', 'bananas', 'coffee beans', 'brown rice', 'pasta', 'coconut oil', 'plantains'];
//.shift() gets rid of first value in array
groceryList.shift();
console.log(groceryList);
//.unshift() replaces first value in array
groceryList.unshift("popcorn");
console.log(groceryList);
//.slice() lets you pick out certarin values
console.log(groceryList.slice(1, 4));
//proof that slice doesnt mutate array
console.log(groceryList);
//using .indexOf to find array value number
const pastaIndex = groceryList.indexOf("pasta", 0);
console.log(pastaIndex);

arrays and functions notes
Throughout the lesson we went over arrays being mutable, or changeable. Well what happens if we try to change an array inside a function? Does the array keep the change after the function call or is it scoped to inside the function?
Take a look at the following example where we call .push() on an array inside a function. Recall, the .push() method mutates, or changes, an array:
const flowers = ['peony', 'daffodil', 'marigold'];
function addFlower(arr) {
  arr.push('lily');
}
addFlower(flowers);
console.log(flowers); // Output: ['peony', 'daffodil', 'marigold', 'lily']
Let’s go over what happened in the example:
    The flowers array that has 3 elements.
    The function addFlower() has a parameter of arr uses .push() to add a 'lily' element into arr.
    We call addFlower() with an argument of flowers which will execute the code inside addFlower.
    We check the value of flowers and it now includes the 'lily' element! The array was mutated!
So when you pass an array into a function, if the array is mutated inside the function, that change will be maintained outside the function as well. You might also see this concept explained as pass-by-reference since what we’re actually passing to the function is a reference to where the variable memory is stored and changing the memory.

Nested Arrays
Earlier we mentioned that arrays can store other arrays. When an array contains another array it is known as a nested array. Examine the example below:
const nestedArr = [[1], [2, 3]];
To access the nested arrays we can use bracket notation with the index value, just like we did to access any other element:
const nestedArr = [[1], [2, 3]];
console.log(nestedArr[1]); // Output: [2, 3]
Notice that nestedArr[1] will grab the element in index 1 which is the array [2, 3]. Then, if we wanted to access the elements within the nested array we can chain, or add on, more bracket notation with index values.
const nestedArr = [[1], [2, 3]];
console.log(nestedArr[1]); // Output: [2, 3]
console.log(nestedArr[1][0]); // Output: 2
In the second console.log() statement, we have two bracket notations chained to nestedArr. We know that nestedArr[1] is the array [2, 3]. Then to grab the first element from that array, we use nestedArr[1][0] and we get the value of 2.
Ex.
const numberClusters = [[1, 2], [3, 4], [5, 6]]
//grabs number 6 from array
const target = numberClusters [2][1];






Resources 

arrays
https://www.codecademy.com/resources/docs/javascript/arrays?page_ref=catalog
https://www.codecademy.com/resources/docs/javascript/arrays
array method shift
https://www.codecademy.com/resources/docs/javascript/arrays/shift
array method slice
https://www.codecademy.com/resources/docs/javascript/arrays/slice
array method index of
https://www.codecademy.com/resources/docs/javascript/arrays/indexOf